trigger:
- master

# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

pool:
  vmImage: 'Ubuntu 16.04'

variables:
  imageName: 'wirelabregistry.azurecr.io/stefankipdockerhelloworld'
  skipComponentGovernanceDetection: 'true'
  DOCKER_BUILDKIT: 1
  #system.debug: 'true'
  #agent.diagnostic: 'true'

  # buildkit tool itself
  BUILD_KIT_CACHE: '$(Pipeline.Workspace)/buildkitcache'
  BUILDKIT_COMMIT: f7cf4823f71b1a43b9911d4ee11f0eb502b54cc8
  BUILDKIT_CACHE_KEY: GOOFS=0 | buildkit | $(BUILDKIT_COMMIT)

  DOCKER_COMMAND: 'buildctl build --frontend=dockerfile.v0 --local context=./src --local --output type=docker,name=$(imageName)'
  CACHE_KEY_SALT: 1
  CACHE_KEY_BUILDKIT: '"DOCKER_BUILDKIT=$(DOCKER_BUILDKIT)" | "BUILDKIT_COMMIT=$(BUILDKIT_COMMIT)"'
  CACHE_KEY_FALLBACK: '"CACHE_KEY_SALT=$(CACHE_KEY_SALT)" | "$(Agent.OS) $(Agent.JobName)" | $(CACHE_KEY_BUILDKIT) | "$(DOCKER_COMMAND)"'
  CACHE_KEY_EXACT: '$(CACHE_KEY_FALLBACK)'

steps:
- script: |
    export DOCKERFILE="$(find . -name 'Dockerfile')"
    export DOCKER_COMMAND="$DOCKER_COMMAND dockerfile=$DOCKERFILE"
    export CACHE_KEY_EXACT="$CACHE_KEY_FALLBACK | $DOCKERFILE"
    env

# Build/restore the BuildKit tool 
- task: Cache@2
  inputs:
    key: $(BUILDKIT_CACHE_KEY)
    path: '$(System.DefaultWorkingDirectory)/buildkit'
    cacheHitVar: 'BuildKitToolHit'
  displayName: 'Cache BuildKit'

- script: |
    git clone https://github.com/moby/buildkit.git
    cd buildkit
    git checkout $(BUILDKIT_COMMIT)
    make
  displayName: "Build BuildKit on cache miss"
  condition: and(succeeded(), ne(variables['BuildKitToolHit'], 'true'))

- script: |
    cd buildkit
    sudo make install
    which buildctl
    which buildkitd
  displayName: "Install BuildKit"

# restore the BuildKit cache based on the Dockerfile ...
- task: Cache@2
  inputs:
    key: $(CACHE_KEY_EXACT)
    path: '$(BUILD_KIT_CACHE)'
    cacheHitVar: 'BuildKitLayersHit'
    restoreKeys: |
      $(CACHE_KEY_FALLBACK)
  displayName: 'Cache docker layers'

- script: |
    set -e -x
    sudo buildkitd --debug --root /var/lib/buildkit &
    sleep 2

    until sudo buildctl du -v
    do
      echo "Waiting for daemon to load"
      sleep 1
    done

    DOCKER_COMMAND="$(DOCKER_COMMAND)"

    if [ -d "$(BUILD_KIT_CACHE)" ]; then
      echo "Using cached layers from $(BUILD_KIT_CACHE)"
      find $(BUILD_KIT_CACHE)
      DOCKER_COMMAND="$DOCKER_COMMAND --import-cache type=local,src=$(BUILD_KIT_CACHE)"
    fi

    if [ "$(BuildKitLayersHit)" != "true" ]; then
      echo "Will store cached layers to $(BUILD_KIT_CACHE)"
      DOCKER_COMMAND="$DOCKER_COMMAND --export-cache mode=max,type=local,dest=$(BUILD_KIT_CACHE)"
    fi

    sudo $DOCKER_COMMAND | docker load

    find $(BUILD_KIT_CACHE)

    sudo kill -9 $(jobs -p)
  displayName: 'Docker build'

- script: docker tag $(imageName) $(imageName):$(Build.BuildId)
  displayName: 'Docker tag'

- task: Docker@2
  inputs:
    containerRegistry: 'Wirelab ACR'
    repository: 'stefankipdockerhelloworld'
    command: 'push'
    tags: '$(Build.BuildId)'
  displayName: 'Docker push'